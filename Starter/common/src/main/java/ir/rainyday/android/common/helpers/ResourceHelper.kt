package ir.rainyday.android.common.helpers


import android.content.Context
import android.graphics.drawable.Drawable
import android.os.Build
import androidx.annotation.ColorRes
import androidx.annotation.DimenRes
import androidx.annotation.DrawableRes
import androidx.core.content.ContextCompat
import android.view.View
import java.io.BufferedReader
import java.io.IOException
import java.io.InputStreamReader
import java.util.*
import java.util.concurrent.atomic.AtomicInteger


/**
 * Created by m_taghipour on 8/21/2016.
 */
object ResourceUtil {

    fun getResId(resName: String, c: Class<*>): Int {

        try {
            val idField = c.getDeclaredField(resName)
            return idField.getInt(idField)
        } catch (e: Exception) {
            e.printStackTrace()
            return -1
        }

    }

    fun getResId(resName: String, resType: String): Int {
        val appContext = GlobalAppContext.instance.applicationContext!!
        return appContext.resources.getIdentifier(resName, resType, appContext.getPackageName())
    }


    fun getResName(resId: Int): String {
        val appContext = GlobalAppContext.instance.applicationContext!!
        return appContext.resources.getResourceEntryName(resId)
    }

    fun getBindingClass(resId: Int): Class<*>? {
        val appContext = GlobalAppContext.instance.applicationContext!!
        try {
            var layoutName = getResName(resId)
            var items = Arrays.asList(*layoutName.split("_".toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray())

            layoutName = items[0].toPascalCase()
            items = items.subList(1, items.size)

            for (i in items.indices) {
                layoutName += items[i].toPascalCase()
            }

            val className = appContext.getPackageName() + ".databinding." + layoutName

            return Class.forName(className)

        } catch (e: ClassNotFoundException) {
            return null
        }

    }

    private val sNextGeneratedId = AtomicInteger(1)
    fun generateViewId(): Int {
        if (Build.VERSION.SDK_INT < 17) {
            while (true) {
                val result = sNextGeneratedId.get()
                // aapt-generated IDs have the high byte nonzero; clamp to the range under that.
                var newValue = result + 1
                if (newValue > 0x00FFFFFF) {
                    newValue = 1 // Roll over to 1, not 0.
                }
                if (sNextGeneratedId.compareAndSet(result, newValue)) {
                    return result
                }
            }
        } else {
            return View.generateViewId()
        }
    }


    /**
     * getInstance an asset using ACCESS_STREAMING mode. This provides access to files that have been bundled with an
     * application as assets -- that is, files placed in to the "assets" directory.
     *
     * @param context
     * @param fileName The name of the asset to open. This name can be hierarchical.
     * @return
     */
    fun geFileFromAssets(context: Context?, fileName: String): String? {
        if (context == null) {
            return null
        }

        val s = StringBuilder("")
        return try {
            val `in` = InputStreamReader(context.resources.assets.open(fileName))
            val br = BufferedReader(`in`)
            var line: String
            do {
                line = br.readLine()
                if (line == null)
                    break
                s.append(line)
            } while (true)
            s.toString()
        } catch (e: IOException) {
            e.printStackTrace()
            null
        }

    }

    /**
     * getInstance content from a raw resource. This can only be used with resources whose value is the name of an asset files
     * -- that is, it can be used to open drawable, sound, and raw resources; it will fail on string and color
     * resources.
     *
     * @param context
     * @param resId The resource identifier to open, as generated by the appt tool.
     * @return
     */
    fun geFileFromRaw(context: Context?, resId: Int): String? {
        if (context == null) {
            return null
        }

        val s = StringBuilder()
        try {
            val `in` = InputStreamReader(context.resources.openRawResource(resId))
            val br = BufferedReader(`in`)
            var line: String
            do {
                line = br.readLine()
                if (line == null)
                    break
                s.append(line)
            } while (true)
            return s.toString()
        } catch (e: IOException) {
            e.printStackTrace()
            return null
        }

    }

    /**
     *
     * @param context
     * @param fileName
     * @return
     */
    fun geFileToListFromAssets(context: Context?, fileName: String): List<String>? {
        if (context == null) {
            return null
        }

        val fileContent = ArrayList<String>()
        try {
            val `in` = InputStreamReader(context.resources.assets.open(fileName))
            val br = BufferedReader(`in`)
            var line: String
            do {
                line = br.readLine()
                if (line == null)
                    break
                fileContent.add(line)
            } while (true)
            br.close()
            return fileContent
        } catch (e: IOException) {
            e.printStackTrace()
            return null
        }

    }

    /**
     *
     * @param context
     * @param resId
     * @return
     */
    fun geFileToListFromRaw(context: Context?, resId: Int): List<String>? {
        if (context == null) {
            return null
        }

        val fileContent = ArrayList<String>()
        val reader: BufferedReader?
        try {
            val `in` = InputStreamReader(context.resources.openRawResource(resId))
            reader = BufferedReader(`in`)
            var line: String?
            do {
                line = reader.readLine()
                if (line == null)
                    break
                fileContent.add(line)
            } while (true)
            reader.close()
            return fileContent
        } catch (e: IOException) {
            e.printStackTrace()
            return null
        }

    }
}


fun Context.getColorCompat(@ColorRes colorID: Int): Int {
    return ContextCompat.getColor(this, colorID)
}


fun Context.getDrawableCompat(@DrawableRes drawableID: Int): Drawable? {
    return ContextCompat.getDrawable(this, drawableID)
}

fun Context.getDimenCompat(@DimenRes dimenID: Int): Int {
    return resources.getDimension(dimenID).toInt()
}

fun androidx.fragment.app.Fragment.getColorCompat(@ColorRes colorID: Int): Int {
    return ContextCompat.getColor(context!!, colorID)
}

fun androidx.fragment.app.Fragment.getDrawableCompat(@DrawableRes drawableID: Int): Drawable? {
    return ContextCompat.getDrawable(context!!, drawableID)
}

fun androidx.fragment.app.Fragment.getDimenCompat(@DimenRes dimenID: Int): Int {
    return resources.getDimension(dimenID).toInt()
}


